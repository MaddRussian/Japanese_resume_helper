<div class="container py-5">
  <div class="row justify-content-center">
    <div class="col-lg-8">
      <div class="card shadow">
        <div class="card-header bg-primary text-white">
          <h2 class="mb-0"><i class="fas fa-file-alt me-2"></i>Create Your Japanese Resume</h2>
        </div>
        <div class="card-body p-4">
          <%= simple_form_for @resume, html: { multipart: true } do |f| %>
            <% if @resume.errors.any? %>
              <div class="alert alert-danger">
                <h4><%= pluralize(@resume.errors.count, "error") %> prohibited this resume from being saved:</h4>
                <ul>
                  <% @resume.errors.full_messages.each do |msg| %>
                    <li><%= msg %></li>
                  <% end %>
                </ul>
              </div>
            <% end %>
            <script>
              // --- Resume Form Persistence ---
              const FORM_KEY = 'resume_form_data_v1';
              document.addEventListener('DOMContentLoaded', function() {
                const form = document.querySelector('form');
                if (!form) return;

                // Restore data
                const saved = localStorage.getItem(FORM_KEY);
                if (saved) {
                  try {
                    const data = JSON.parse(saved);
                    for (const [name, value] of Object.entries(data)) {
                      // Don't restore file fields
                      const field = form.querySelector(`[name="${CSS.escape(name)}"]`);
                      if (field && field.type !== 'file') {
                        field.value = value;
                        // For select fields, trigger change event
                        if (field.tagName === 'SELECT') {
                          field.dispatchEvent(new Event('change'));
                        }
                      }
                    }
                  } catch(e) { /* ignore */ }
                }

                // Save data on input/change
                form.addEventListener('input', saveFormData);
                form.addEventListener('change', saveFormData);

                function saveFormData() {
                  const fields = form.querySelectorAll('input, textarea, select');
                  const data = {};
                  fields.forEach(field => {
                    if (field.name && field.type !== 'file') {
                      data[field.name] = field.value;
                    }
                  });
                  localStorage.setItem(FORM_KEY, JSON.stringify(data));
                }

                // Clear data on successful submit
                form.addEventListener('submit', function() {
                  localStorage.removeItem(FORM_KEY);
                });
              });
            </script>
            <!-- Basic Information Section -->
            <div class="mb-4">
              <h4 class="text-primary mb-3"><i class="fas fa-user me-2"></i>Basic Information</h4>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <%= f.label :title, "Full Name", class: "form-label fw-bold" %>
                  <%= f.text_field :title, class: "form-control", placeholder: "Your full name" %>
                </div>
                <div class="col-md-6 mb-3">
                  <%= f.label :photo, "Profile Photo", class: "form-label fw-bold" %>
                  <%= f.file_field :photo, class: "form-control", accept: "image/*" %>
                  <small class="text-muted">Upload a professional headshot (JPG, PNG, max 5MB)</small>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6 mb-3">
                  <%= f.label :phone_number, "Phone Number", class: "form-label fw-bold" %>
                  <%= f.text_field :phone_number, class: "form-control", placeholder: "+81-90-1234-5678" %>
                </div>
                <div class="col-md-6 mb-3">
                  <%= f.label :address, "Address", class: "form-label fw-bold" %>
                  <%= f.text_field :address, class: "form-control", placeholder: "Your full address" %>
                </div>
              </div>
              <div class="mb-3">
                <%= f.label :summary, "Professional Summary", class: "form-label fw-bold" %>
                <%= f.text_area :summary, class: "form-control", rows: 4, placeholder: "Brief overview of your professional background, key skills, and career objectives..." %>
              </div>
            </div>
            <!-- Education Section -->
            <div class="mb-4">
              <h4 class="text-primary mb-3"><i class="fas fa-graduation-cap me-2"></i>Education</h4>
              <!-- Display existing educations in read-only format -->
              <div id="education-display" class="mb-4" style="display: none;">
                <!-- Existing educations will be displayed here -->
              </div>
              <!-- Hidden fields for education data -->
              <div id="education-fields" style="display: none;">
                <!-- Hidden education form fields will be added here -->
              </div>
              <!-- Original form fields (shown initially) -->
              <div id="education-original-form">
                <%= f.fields_for :educations do |edu| %>
                  <div class="education-entry card mb-3">
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <%= edu.label :school_name, "School Name", class: "form-label fw-bold" %>
                          <%= edu.text_field :school_name, class: "form-control education-field", placeholder: "University of Tokyo" %>
                        </div>
                        <div class="col-md-6 mb-3">
                          <%= edu.label :institution_type, "Institution Type", class: "form-label fw-bold" %>
                          <%= edu.select :institution_type,
                              options_for_select([
                                ['Undergraduate', 'undergraduate'],
                                ['Graduate', 'graduate'],
                                ['Vocational School', 'vocational'],
                                ['High School', 'high_school'],
                                ['Community College', 'community_college'],
                                ['Technical Institute', 'technical'],
                                ['Language School', 'language_school'],
                                ['Other', 'other']
                              ]),
                              { prompt: 'Select institution type' },
                              { class: "form-control education-field" } %>
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <%= edu.label :degree, "Degree", class: "form-label fw-bold" %>
                          <%= edu.text_field :degree, class: "form-control education-field", placeholder: "Bachelor of Science" %>
                        </div>
                        <div class="col-md-6 mb-3">
                          <%= edu.label :field, "Field of Study", class: "form-label fw-bold" %>
                          <%= edu.text_field :field, class: "form-control education-field", placeholder: "Computer Science" %>
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <%= edu.label :start_date, "Start Date", class: "form-label fw-bold" %>
                          <%= edu.month_field :start_date, class: "form-control education-field" %>
                        </div>
                        <div class="col-md-6 mb-3">
                          <%= edu.label :end_date, "End Date", class: "form-label fw-bold" %>
                          <%= edu.month_field :end_date, class: "form-control education-field" %>
                        </div>
                      </div>
                      <div class="mb-3">
                        <%= edu.label :description, "Description", class: "form-label fw-bold" %>
                        <%= edu.text_area :description, class: "form-control education-field", rows: 3, placeholder: "Relevant coursework, achievements, GPA..." %>
                      </div>
                    </div>
                  </div>
                <% end %>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-education-btn" onclick="addEducation()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Education
                  </button>
                </div>
              </div>
              <!-- Form for adding new education (shown after first education) -->
              <div id="education-form" style="display: none;">
                <div class="education-entry card mb-3">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">School Name</label>
                        <input type="text" id="new-school" class="form-control education-field" placeholder="University of Tokyo">
                      </div>
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Institution Type</label>
                        <select id="new-institution-type" class="form-control education-field">
                          <option value="">Select institution type</option>
                          <option value="undergraduate">Undergraduate</option>
                          <option value="graduate">Graduate</option>
                          <option value="vocational">Vocational School</option>
                          <option value="high_school">High School</option>
                          <option value="community_college">Community College</option>
                          <option value="technical">Technical Institute</option>
                          <option value="language_school">Language School</option>
                          <option value="other">Other</option>
                        </select>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Degree</label>
                        <input type="text" id="new-degree" class="form-control education-field" placeholder="Bachelor of Science">
                      </div>
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Field of Study</label>
                        <input type="text" id="new-field" class="form-control education-field" placeholder="Computer Science">
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Start Date</label>
                        <input type="month" id="new-edu-start-date" class="form-control education-field">
                      </div>
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">End Date</label>
                        <input type="month" id="new-edu-end-date" class="form-control education-field">
                      </div>
                    </div>
                    <div class="mb-3">
                      <label class="form-label fw-bold">Description</label>
                      <textarea id="new-edu-description" class="form-control education-field" rows: 3 placeholder="Relevant coursework, achievements, GPA..."></textarea>
                    </div>
                  </div>
                </div>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-education-btn-new" onclick="addEducationFromForm()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Education
                  </button>
                </div>
              </div>
            </div>
            <!-- Experience Section -->
            <div class="mb-4">
              <h4 class="text-primary mb-3"><i class="fas fa-briefcase me-2"></i>Work Experience</h4>
              <!-- Display existing experiences in read-only format -->
              <div id="experience-display" class="mb-4" style="display: none;">
                <!-- Existing experiences will be displayed here -->
              </div>
              <!-- Hidden fields for experience data -->
              <div id="experience-fields" style="display: none;">
                <!-- Hidden experience form fields will be added here -->
              </div>
              <!-- Original form fields (shown initially) -->
              <div id="experience-original-form">
                <%= f.fields_for :experiences do |exp| %>
                  <div class="experience-entry card mb-3">
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <%= exp.label :company_name, "Company Name", class: "form-label fw-bold" %>
                          <%= exp.text_field :company_name, class: "form-control experience-field", placeholder: "Sony Corporation" %>
                        </div>
                        <div class="col-md-6 mb-3">
                          <%= exp.label :title, "Job Title", class: "form-label fw-bold" %>
                          <%= exp.text_field :title, class: "form-control experience-field", placeholder: "Software Engineer" %>
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-md-6 mb-3">
                          <%= exp.label :start_date, "Start Date", class: "form-label fw-bold" %>
                          <%= exp.month_field :start_date, class: "form-control experience-field" %>
                        </div>
                        <div class="col-md-6 mb-3">
                          <%= exp.label :end_date, "End Date", class: "form-label fw-bold" %>
                          <%= exp.month_field :end_date, class: "form-control experience-field" %>
                        </div>
                      </div>
                      <div class="mb-3">
                        <%= exp.label :description, "Job Description", class: "form-label fw-bold" %>
                        <%= exp.text_area :description, class: "form-control experience-field", rows: 4, placeholder: "Describe your responsibilities, achievements, and key projects..." %>
                      </div>
                    </div>
                  </div>
                <% end %>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-experience-btn" onclick="addExperience()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Experience
                  </button>
                </div>
              </div>
              <!-- Form for adding new experience (shown after first experience) -->
              <div id="experience-form" style="display: none;">
                <div class="experience-entry card mb-3">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Company Name</label>
                        <input type="text" id="new-company" class="form-control experience-field" placeholder="Sony Corporation">
                      </div>
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Job Title</label>
                        <input type="text" id="new-title" class="form-control experience-field" placeholder="Software Engineer">
                      </div>
                    </div>
                    <div class="row">
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">Start Date</label>
                        <input type="month" id="new-start-date" class="form-control experience-field">
                      </div>
                      <div class="col-md-6 mb-3">
                        <label class="form-label fw-bold">End Date</label>
                        <input type="month" id="new-end-date" class="form-control experience-field">
                      </div>
                    </div>
                    <div class="mb-3">
                      <label class="form-label fw-bold">Job Description</label>
                      <textarea id="new-description" class="form-control experience-field" rows: 4 placeholder="Describe your responsibilities, achievements, and key projects..."></textarea>
                    </div>
                  </div>
                </div>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-experience-btn-new" onclick="addExperienceFromForm()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Experience
                  </button>
                </div>
              </div>
            </div>
            <!-- Skills Section -->
            <div class="mb-4">
              <h4 class="text-primary mb-3"><i class="fas fa-tools me-2"></i>Skills</h4>
              <div class="mb-3">
                <label class="form-label fw-bold">Add Skills (separate with commas)</label>
                <div class="input-group">
                  <input type="text" id="skill-input" class="form-control" placeholder="e.g., JavaScript, React, Project Management" onkeypress="handleSkillKeyPress(event)">
                  <button type="button" class="btn btn-outline-primary" onclick="addSkillFromInput()">
                    <i class="fas fa-plus me-1"></i>Add
                  </button>
                </div>
              </div>
              <div id="skills-display" class="mb-3">
                <!-- Skills will be displayed here as tags -->
              </div>
              <div id="skill-tags" class="mb-3">
                <!-- Skills will be displayed here as tags -->
              </div>
              <div id="skills-fields" style="display: none;">
                <%= f.fields_for :skills do |skill| %>
                  <div class="skill-entry">
                    <%= skill.text_field :name, class: "form-control skill-field" %>
                  </div>
                <% end %>
              </div>
            </div>
            <!-- Certifications Section -->
            <div class="mb-4">
              <h4 class="text-primary mb-3"><i class="fas fa-certificate me-2"></i>Certifications</h4>
              <!-- Display existing certifications in read-only format -->
              <div id="certification-display" class="mb-4" style="display: none;">
                <!-- Existing certifications will be displayed here -->
              </div>
              <!-- Original form fields (shown initially) -->
              <div id="certification-original-form">
                <%= f.fields_for :certifications do |cert| %>
                  <div class="certification-entry card mb-3">
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-8 mb-3">
                          <%= cert.label :name, "Certification Name", class: "form-label fw-bold" %>
                          <%= cert.text_field :name, class: "form-control certification-field", placeholder: "e.g., AWS Certified Solutions Architect, JLPT N2" %>
                        </div>
                        <div class="col-md-4 mb-3">
                          <%= cert.label :completion_date, "Completion Date", class: "form-label fw-bold" %>
                          <%= cert.month_field :completion_date, class: "form-control certification-field" %>
                        </div>
                      </div>
                    </div>
                  </div>
                <% end %>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-certification-btn" onclick="addCertification()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Certification
                  </button>
                </div>
              </div>
              <!-- Form for adding new certification (shown after first certification) -->
              <div id="certification-form" style="display: none;">
                <div class="certification-entry card mb-3">
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-8 mb-3">
                        <label class="form-label fw-bold">Certification Name</label>
                        <input type="text" id="new-certification-name" class="form-control certification-field" placeholder="e.g., AWS Certified Solutions Architect, JLPT N2">
                      </div>
                      <div class="col-md-4 mb-3">
                        <label class="form-label fw-bold">Completion Date</label>
                        <input type="month" id="new-certification-date" class="form-control certification-field">
                      </div>
                    </div>
                  </div>
                </div>
                <div class="text-center mt-3">
                  <button type="button" class="btn btn-outline-primary" id="add-certification-btn-new" onclick="addCertificationFromForm()" disabled>
                    <i class="fas fa-plus me-1"></i>Add Certification
                  </button>
                </div>
              </div>
            </div>
            <!-- Submit Button -->
            <div class="text-center">
              <%= f.submit "Create Resume", class: "btn btn-primary btn-lg px-5" %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
  let experienceIndex = 0;
  let educationIndex = 0;
  let skillIndex = 0;
  let certificationIndex = 0;

  // Add event listeners for validation
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize skills from existing form fields
    initializeSkills();

    // Initialize experience display
    initializeExperienceDisplay();

    // Initialize education display
    initializeEducationDisplay();

    // Initialize certification display
    initializeCertificationDisplay();

    // Initial validation
    validateExperienceSection();
    validateEducationSection();
    validateCertificationSection();
    validateSkillSection();

    // Add event listeners to existing fields
    document.querySelectorAll('.experience-field').forEach(field => {
      field.addEventListener('input', validateExperienceSection);
    });

    document.querySelectorAll('.education-field').forEach(field => {
      field.addEventListener('input', validateEducationSection);
    });

    document.querySelectorAll('.certification-field').forEach(field => {
      field.addEventListener('input', validateCertificationSection);
    });

    document.querySelectorAll('.skill-field').forEach(field => {
      field.addEventListener('input', validateSkillSection);
    });

    // Re-initialize validation after form re-render (for validation errors)
    setTimeout(() => {
      validateExperienceSection();
      validateEducationSection();
      validateCertificationSection();
      validateSkillSection();
    }, 100);
  });

  function initializeExperienceDisplay() {
    const experienceFields = document.querySelectorAll('#experience-original-form .experience-entry');

    if (experienceFields.length > 0) {
      // Check if any experience has data
      let hasData = false;
      experienceFields.forEach(entry => {
        const fields = entry.querySelectorAll('input, textarea');
        fields.forEach(field => {
          if (field.value.trim() !== '') {
            hasData = true;
          }
        });
      });

      if (hasData) {
        // Switch to display mode if there's existing data
        switchToDisplayMode();

        // Convert existing form data to display format
        experienceFields.forEach((entry, index) => {
          const fields = entry.querySelectorAll('input, textarea');
          if (fields.length >= 5) {
            const company = fields[0].value;
            const title = fields[1].value;
            const startDate = fields[2].value;
            const endDate = fields[3].value;
            const description = fields[4].value;

            if (company || title || startDate || endDate || description) {
              addExperienceDisplay(company, title, startDate, endDate, description, index);
            }
          }
        });
      }
    }
  }

  function addExperienceDisplay(company, title, startDate, endDate, description, index) {
    const displayContainer = document.getElementById('experience-display');
    const displayHtml = `
      <div class="card mb-3 experience-display-entry" data-index="${index}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-2">
            <div>
              <h6 class="mb-1 fw-bold text-primary">${title || 'Job Title'}</h6>
              <p class="mb-1 text-muted">${company || 'Company Name'}</p>
            </div>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeExperienceDisplay(${index})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
          <div class="row mb-2">
            <div class="col-md-6">
              <small class="text-muted">
                <i class="fas fa-calendar me-1"></i>
                ${startDate ? formatMonthYear(startDate) : 'Start Date'} - ${endDate ? formatMonthYear(endDate) : 'End Date'}
              </small>
            </div>
          </div>
          ${description ? `<p class="mb-0 small">${description}</p>` : ''}
        </div>
      </div>
    `;
    displayContainer.insertAdjacentHTML('beforeend', displayHtml);
  }

  function addExperienceFromForm() {
    const company = document.getElementById('new-company').value.trim();
    const title = document.getElementById('new-title').value.trim();
    const startDate = document.getElementById('new-start-date').value;
    const endDate = document.getElementById('new-end-date').value;
    const description = document.getElementById('new-description').value.trim();

    if (company && title && startDate && endDate && description) {
      // Add to display
      addExperienceDisplay(company, title, startDate, endDate, description, experienceIndex);

      // Add hidden form field
      addHiddenExperienceField(company, title, startDate, endDate, description);

      // Clear form
      clearExperienceForm();

      // Disable add button
      document.getElementById('add-experience-btn').disabled = true;

      experienceIndex++;
    }
  }

  function addHiddenExperienceField(company, title, startDate, endDate, description) {
    const experienceFieldsContainer = document.getElementById('experience-fields');
    const fieldHtml = `
      <div class="experience-entry">
        <input type="text" name="resume[experiences_attributes][${experienceIndex}][company_name]" value="${company}" style="display: none;">
        <input type="text" name="resume[experiences_attributes][${experienceIndex}][title]" value="${title}" style="display: none;">
        <input type="month" name="resume[experiences_attributes][${experienceIndex}][start_date]" value="${startDate}" style="display: none;">
        <input type="month" name="resume[experiences_attributes][${experienceIndex}][end_date]" value="${endDate}" style="display: none;">
        <textarea name="resume[experiences_attributes][${experienceIndex}][description]" style="display: none;">${description}</textarea>
      </div>
    `;
    experienceFieldsContainer.insertAdjacentHTML('beforeend', fieldHtml);
  }

  function clearExperienceForm() {
    document.getElementById('new-company').value = '';
    document.getElementById('new-title').value = '';
    document.getElementById('new-start-date').value = '';
    document.getElementById('new-end-date').value = '';
    document.getElementById('new-description').value = '';
  }

  function removeExperienceDisplay(index) {
    // Remove from display
    const displayEntry = document.querySelector(`.experience-display-entry[data-index="${index}"]`);
    if (displayEntry) {
      displayEntry.remove();
    }

    // Remove from hidden fields
    const experienceFields = document.querySelectorAll('#experience-fields .experience-entry');
    if (experienceFields[index]) {
      experienceFields[index].remove();
    }
  }

  function validateEducationSection() {
    const educationEntries = document.querySelectorAll('#education-original-form .education-entry');
    const addBtn = document.getElementById('add-education-btn');

    if (educationEntries.length === 0) {
      addBtn.disabled = true;
      return;
    }

    const lastEntry = educationEntries[educationEntries.length - 1];
    const fields = lastEntry.querySelectorAll('input, textarea, select');

    const allFilled = Array.from(fields).every(field => {
      const value = field.value.trim();
      return value !== '';
    });

    addBtn.disabled = !allFilled;
  }

    function validateExperienceSection() {
    const experienceEntries = document.querySelectorAll('#experience-original-form .experience-entry');
    const addBtn = document.getElementById('add-experience-btn');
    const deleteBtns = document.querySelectorAll('#experience-original-form .experience-entry .btn-outline-danger');

    if (experienceEntries.length === 0) {
      addBtn.disabled = true;
      return;
    }

    const lastEntry = experienceEntries[experienceEntries.length - 1];
    const fields = lastEntry.querySelectorAll('.experience-field');

    const allFilled = Array.from(fields).every(field => {
      const value = field.value.trim();
      return value !== '';
    });

    addBtn.disabled = !allFilled;

    // Show/hide delete buttons based on number of entries
    deleteBtns.forEach(btn => {
      btn.style.display = experienceEntries.length > 1 ? 'block' : 'none';
    });
  }

    function validateCertificationSection() {
    const certificationEntries = document.querySelectorAll('#certification-original-form .certification-entry');
    const addBtn = document.getElementById('add-certification-btn');
    const deleteBtns = document.querySelectorAll('#certification-original-form .certification-entry .btn-outline-danger');

    if (certificationEntries.length === 0) {
      addBtn.disabled = true;
      return;
    }

    const lastEntry = certificationEntries[certificationEntries.length - 1];
    const fields = lastEntry.querySelectorAll('.certification-field');

    const allFilled = Array.from(fields).every(field => {
      const value = field.value.trim();
      return value !== '';
    });

    addBtn.disabled = !allFilled;

    // Show/hide delete buttons based on number of entries
    deleteBtns.forEach(btn => {
      btn.style.display = certificationEntries.length > 1 ? 'block' : 'none';
    });
  }

  function validateSkillSection() {
    // Skills section uses a different validation approach with input field
    // No need for traditional validation since skills are added via input field
  }

  function addEducation() {
    const educationEntries = document.querySelectorAll('#education-original-form .education-entry');

    // If this is the first education, handle the transition to display mode
    if (educationEntries.length === 1) {
      const lastEntry = educationEntries[0];
      const fields = lastEntry.querySelectorAll('.education-field');

      // Get the data from the completed education
      const school = fields[0].value.trim();
      const institutionType = fields[1].value;
      const degree = fields[2].value.trim();
      const field = fields[3].value.trim();
      const startDate = fields[4].value;
      const endDate = fields[5].value;
      const description = fields[6].value.trim();

      // Switch to display mode
      switchToEducationDisplayMode();

      // Add the completed education to display
      addEducationDisplay(school, institutionType, degree, field, startDate, endDate, description, 0);

      // Add hidden form field
      addHiddenEducationField(school, institutionType, degree, field, startDate, endDate, description);

      // Clear the original form
      lastEntry.remove();

      return;
    }

    // For additional educations, add new form fields as before
    const container = document.getElementById('education-original-form');
    const template = `
      <div class="education-entry card mb-3">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-3">
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeField(this)">
              <i class="fas fa-trash"></i>
            </button>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">School Name</label>
              <input type="text" name="resume[educations_attributes][${educationIndex}][school_name]" class="form-control education-field" placeholder="University of Tokyo">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Institution Type</label>
              <select name="resume[educations_attributes][${educationIndex}][institution_type]" class="form-control education-field">
                <option value="">Select institution type</option>
                <option value="undergraduate">Undergraduate</option>
                <option value="graduate">Graduate</option>
                <option value="vocational">Vocational School</option>
                <option value="high_school">High School</option>
                <option value="community_college">Community College</option>
                <option value="technical">Technical Institute</option>
                <option value="language_school">Language School</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Degree</label>
              <input type="text" name="resume[educations_attributes][${educationIndex}][degree]" class="form-control education-field" placeholder="Bachelor of Science">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Field of Study</label>
              <input type="text" name="resume[educations_attributes][${educationIndex}][field]" class="form-control education-field" placeholder="Computer Science">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Start Date</label>
              <input type="month" name="resume[educations_attributes][${educationIndex}][start_date]" class="form-control education-field">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">End Date</label>
              <input type="month" name="resume[educations_attributes][${educationIndex}][end_date]" class="form-control education-field">
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Description</label>
            <textarea name="resume[educations_attributes][${educationIndex}][description]" class="form-control education-field" rows: 3 placeholder="Relevant coursework, achievements, GPA..."></textarea>
          </div>
        </div>
      </div>
    `;
    container.insertAdjacentHTML('beforeend', template);
    educationIndex++;

    // Add event listeners to new fields
    const newEntry = container.lastElementChild;
    newEntry.querySelectorAll('.education-field').forEach(field => {
      field.addEventListener('input', validateEducationSection);
    });

    // Disable button after adding
    document.getElementById('add-education-btn').disabled = true;
  }

  function addExperience() {
    const experienceEntries = document.querySelectorAll('#experience-original-form .experience-entry');

    // If this is the first experience, handle the transition to display mode
    if (experienceEntries.length === 1) {
      const lastEntry = experienceEntries[0];
      const fields = lastEntry.querySelectorAll('.experience-field');

      // Get the data from the completed experience
      const company = fields[0].value.trim();
      const title = fields[1].value.trim();
      const startDate = fields[2].value;
      const endDate = fields[3].value;
      const description = fields[4].value.trim();

      // Switch to display mode
      switchToDisplayMode();

      // Add the completed experience to display
      addExperienceDisplay(company, title, startDate, endDate, description, 0);

      // Add hidden form field
      addHiddenExperienceField(company, title, startDate, endDate, description);

      // Clear the original form
      lastEntry.remove();

      return;
    }

    // For additional experiences, add new form fields as before
    const container = document.getElementById('experience-original-form');
    const template = `
      <div class="experience-entry card mb-3">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-3">
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeField(this)">
              <i class="fas fa-trash"></i>
            </button>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Company Name</label>
              <input type="text" name="resume[experiences_attributes][${experienceIndex}][company_name]" class="form-control experience-field" placeholder="Sony Corporation">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Job Title</label>
              <input type="text" name="resume[experiences_attributes][${experienceIndex}][title]" class="form-control experience-field" placeholder="Software Engineer">
            </div>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">Start Date</label>
              <input type="month" name="resume[experiences_attributes][${experienceIndex}][start_date]" class="form-control experience-field">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label fw-bold">End Date</label>
              <input type="month" name="resume[experiences_attributes][${experienceIndex}][end_date]" class="form-control experience-field">
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Job Description</label>
            <textarea name="resume[experiences_attributes][${experienceIndex}][description]" class="form-control experience-field" rows: 4 placeholder="Describe your responsibilities, achievements, and key projects..."></textarea>
          </div>
        </div>
      </div>
    `;
    container.insertAdjacentHTML('beforeend', template);
    experienceIndex++;

    // Add event listeners to new fields
    const newEntry = container.lastElementChild;
    newEntry.querySelectorAll('.experience-field').forEach(field => {
      field.addEventListener('input', validateExperienceSection);
    });

    // Disable button after adding
    document.getElementById('add-experience-btn').disabled = true;
  }

  function validateExperienceForm() {
    const company = document.getElementById('new-company').value.trim();
    const title = document.getElementById('new-title').value.trim();
    const startDate = document.getElementById('new-start-date').value;
    const endDate = document.getElementById('new-end-date').value;
    const description = document.getElementById('new-description').value.trim();

    const addBtn = document.getElementById('add-experience-btn-new');
    const allFilled = company && title && startDate && endDate && description;

    addBtn.disabled = !allFilled;
  }

  function switchToDisplayMode() {
    // Hide original form
    document.getElementById('experience-original-form').style.display = 'none';

    // Show display and new form
    document.getElementById('experience-display').style.display = 'block';
    document.getElementById('experience-form').style.display = 'block';

    // Add event listeners to new form fields
    document.querySelectorAll('#experience-form .experience-field').forEach(field => {
      field.addEventListener('input', validateExperienceForm);
    });
  }

  function addSkill() {
    const skillInput = document.getElementById('skill-input');
    const skill = skillInput.value.trim();
    if (skill) {
      addSkillTag(skill);
      addHiddenSkillField(skill);
      skillInput.value = '';
      validateSkillSection();
    }
  }

  function handleSkillKeyPress(event) {
    if (event.key === 'Enter') {
      event.preventDefault();
      addSkillFromInput();
    }
  }

  function addSkillFromInput() {
    const input = document.getElementById('skill-input');
    const skillName = input.value.trim();

    if (skillName !== '') {
      addSkillTag(skillName);
      setTimeout(() => {
        // Clear after DOM update in case input is replaced
        const inputAgain = document.getElementById('skill-input');
        if (inputAgain) {
          inputAgain.value = '';
          inputAgain.focus();
          console.log('Skill input cleared:', inputAgain.value);
        }
      }, 50);
    }
  }

  function addSkillTag(skillName) {
    const skillTagsContainer = document.getElementById('skill-tags');

    const tagHtml = `
      <span class="badge bg-primary me-2 mb-2 p-2" style="font-size: 0.9rem;">
        ${skillName}
        <button type="button" class="btn btn-sm btn-outline-light ms-2" onclick="removeSkillTag(this, '${skillName}')" style="padding: 0 4px; font-size: 0.8rem;">
          <i class="fas fa-times"></i>
        </button>
      </span>
    `;

    skillTagsContainer.insertAdjacentHTML('beforeend', tagHtml);

    // Add hidden form field for Rails
    addHiddenSkillField(skillName);

    skillIndex++;
  }

  function removeSkillTag(button, skillName) {
    button.closest('.badge').remove();
    removeHiddenSkillField(skillName);
  }

  function addHiddenSkillField(skillName) {
    const skillFieldsContainer = document.getElementById('skill-fields');
    const fieldHtml = `
      <div class="skill-entry">
        <input type="text" name="resume[skills_attributes][${skillIndex}][name]" class="form-control skill-field" value="${skillName}" style="display: none;">
      </div>
    `;
    skillFieldsContainer.insertAdjacentHTML('beforeend', fieldHtml);
  }

  function removeHiddenSkillField(skillName) {
    const skillFields = document.querySelectorAll('.skill-field');
    skillFields.forEach(field => {
      if (field.value === skillName) {
        field.closest('.skill-entry').remove();
      }
    });
  }

  function initializeEducationDisplay() {
    const educationFields = document.querySelectorAll('#education-original-form .education-entry');

    if (educationFields.length > 0) {
      // Check if any education has data
      let hasData = false;
      educationFields.forEach(entry => {
        const fields = entry.querySelectorAll('input, textarea, select');
        fields.forEach(field => {
          if (field.value.trim() !== '') {
            hasData = true;
          }
        });
      });

      if (hasData) {
        // Switch to display mode if there's existing data
        switchToEducationDisplayMode();

        // Convert existing form data to display format
        educationFields.forEach((entry, index) => {
          const fields = entry.querySelectorAll('input, textarea, select');
          if (fields.length >= 7) {
            const school = fields[0].value;
            const institutionType = fields[1].value;
            const degree = fields[2].value;
            const field = fields[3].value;
            const startDate = fields[4].value;
            const endDate = fields[5].value;
            const description = fields[6].value;

            if (school || institutionType || degree || field || startDate || endDate || description) {
              addEducationDisplay(school, institutionType, degree, field, startDate, endDate, description, index);
            }
          }
        });
      }
    }
  }

  function validateEducationForm() {
    const school = document.getElementById('new-school').value.trim();
    const institutionType = document.getElementById('new-institution-type').value;
    const degree = document.getElementById('new-degree').value.trim();
    const field = document.getElementById('new-field').value.trim();
    const startDate = document.getElementById('new-edu-start-date').value;
    const endDate = document.getElementById('new-edu-end-date').value;
    const description = document.getElementById('new-edu-description').value.trim();

    const addBtn = document.getElementById('add-education-btn-new');
    const allFilled = school && institutionType && degree && field && startDate && endDate && description;

    addBtn.disabled = !allFilled;
  }

  function switchToEducationDisplayMode() {
    // Hide original form
    document.getElementById('education-original-form').style.display = 'none';

    // Show display and new form
    document.getElementById('education-display').style.display = 'block';
    document.getElementById('education-form').style.display = 'block';

    // Add event listeners to new form fields
    document.querySelectorAll('#education-form .education-field').forEach(field => {
      field.addEventListener('input', validateEducationForm);
    });
  }

  function addEducationDisplay(school, institutionType, degree, field, startDate, endDate, description, index) {
    const displayContainer = document.getElementById('education-display');
    const institutionTypeText = getInstitutionTypeText(institutionType);
    const displayHtml = `
      <div class="card mb-3 education-display-entry" data-index="${index}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-2">
            <div>
              <h6 class="mb-1 fw-bold text-primary">${degree || 'Degree'}</h6>
              <p class="mb-1 text-muted">${school || 'School Name'}</p>
              <small class="text-muted">${institutionTypeText}</small>
            </div>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeEducationDisplay(${index})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
          <div class="row mb-2">
            <div class="col-md-6">
              <small class="text-muted">
                <i class="fas fa-graduation-cap me-1"></i>
                ${field || 'Field of Study'}
              </small>
            </div>
            <div class="col-md-6">
              <small class="text-muted">
                <i class="fas fa-calendar me-1"></i>
                ${startDate ? formatMonthYear(startDate) : 'Start Date'} - ${endDate ? formatMonthYear(endDate) : 'End Date'}
              </small>
            </div>
          </div>
          ${description ? `<p class="mb-0 small">${description}</p>` : ''}
        </div>
      </div>
    `;
    displayContainer.insertAdjacentHTML('beforeend', displayHtml);
  }

  function getInstitutionTypeText(type) {
    const types = {
      'undergraduate': 'Undergraduate',
      'graduate': 'Graduate',
      'vocational': 'Vocational School',
      'high_school': 'High School',
      'community_college': 'Community College',
      'technical': 'Technical Institute',
      'language_school': 'Language School',
      'other': 'Other'
    };
    return types[type] || type;
  }

  function addEducationFromForm() {
    const school = document.getElementById('new-school').value.trim();
    const institutionType = document.getElementById('new-institution-type').value;
    const degree = document.getElementById('new-degree').value.trim();
    const field = document.getElementById('new-field').value.trim();
    const startDate = document.getElementById('new-edu-start-date').value;
    const endDate = document.getElementById('new-edu-end-date').value;
    const description = document.getElementById('new-edu-description').value.trim();

    if (school && institutionType && degree && field && startDate && endDate && description) {
      addEducationDisplay(school, institutionType, degree, field, startDate, endDate, description, educationIndex);
      addHiddenEducationField(school, institutionType, degree, field, startDate, endDate, description);
      clearEducationForm();
      document.getElementById('add-education-btn-new').disabled = true;
      educationIndex++;
    }
  }

  function addHiddenEducationField(school, institutionType, degree, field, startDate, endDate, description) {
    const educationFieldsContainer = document.getElementById('education-fields');
    const fieldHtml = `
      <div class="education-entry">
        <input type="text" name="resume[educations_attributes][${educationIndex}][school_name]" value="${school}" style="display: none;">
        <input type="text" name="resume[educations_attributes][${educationIndex}][institution_type]" value="${institutionType}" style="display: none;">
        <input type="text" name="resume[educations_attributes][${educationIndex}][degree]" value="${degree}" style="display: none;">
        <input type="text" name="resume[educations_attributes][${educationIndex}][field]" value="${field}" style="display: none;">
        <input type="month" name="resume[educations_attributes][${educationIndex}][start_date]" value="${startDate}" style="display: none;">
        <input type="month" name="resume[educations_attributes][${educationIndex}][end_date]" value="${endDate}" style="display: none;">
        <textarea name="resume[educations_attributes][${educationIndex}][description]" style="display: none;">${description}</textarea>
      </div>
    `;
    educationFieldsContainer.insertAdjacentHTML('beforeend', fieldHtml);
  }

  function clearEducationForm() {
    document.getElementById('new-school').value = '';
    document.getElementById('new-institution-type').value = '';
    document.getElementById('new-degree').value = '';
    document.getElementById('new-field').value = '';
    document.getElementById('new-edu-start-date').value = '';
    document.getElementById('new-edu-end-date').value = '';
    document.getElementById('new-edu-description').value = '';
  }

  function removeEducationDisplay(index) {
    const displayEntry = document.querySelector(`.education-display-entry[data-index="${index}"]`);
    if (displayEntry) {
      displayEntry.remove();
    }
    const educationFields = document.querySelectorAll('#education-fields .education-entry');
    if (educationFields[index]) {
      educationFields[index].remove();
    }
  }

  function initializeCertificationDisplay() {
    const certificationFields = document.querySelectorAll('#certification-original-form .certification-entry');

    if (certificationFields.length > 0) {
      // Check if any certification has data
      let hasData = false;
      certificationFields.forEach(entry => {
        const fields = entry.querySelectorAll('input, textarea');
        fields.forEach(field => {
          if (field.value.trim() !== '') {
            hasData = true;
          }
        });
      });

      if (hasData) {
        // Switch to display mode if there's existing data
        switchToCertificationDisplayMode();

        // Convert existing form data to display format
        certificationFields.forEach((entry, index) => {
          const fields = entry.querySelectorAll('input, textarea');
          if (fields.length >= 2) {
            const name = fields[0].value;
            const completionDate = fields[1].value;

            if (name || completionDate) {
              addCertificationDisplay(name, completionDate, index);
            }
          }
        });
      }
    }
  }

  function addCertificationDisplay(name, completionDate, index) {
    const displayContainer = document.getElementById('certification-display');
    const displayHtml = `
      <div class="card mb-3 certification-display-entry" data-index="${index}">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-start mb-2">
            <div>
              <h6 class="mb-1 fw-bold text-primary">${name || 'Certification Name'}</h6>
              <p class="mb-1 text-muted">${completionDate ? formatMonthYear(completionDate) : 'Completion Date'}</p>
            </div>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeCertificationDisplay(${index})">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>
      </div>
    `;
    displayContainer.insertAdjacentHTML('beforeend', displayHtml);
  }

  function addCertification() {
    const certificationEntries = document.querySelectorAll('#certification-original-form .certification-entry');

    // If this is the first certification, handle the transition to display mode
    if (certificationEntries.length === 1) {
      const lastEntry = certificationEntries[0];
      const fields = lastEntry.querySelectorAll('.certification-field');

      // Get the data from the completed certification
      const name = fields[0].value.trim();
      const completionDate = fields[1].value;

      // Switch to display mode
      switchToCertificationDisplayMode();

      // Add the completed certification to display
      addCertificationDisplay(name, completionDate, 0);

      // Add hidden form field
      addHiddenCertificationField(name, completionDate);

      // Clear the original form
      lastEntry.remove();

      return;
    }

    // For additional certifications, add new form fields as before
    const container = document.getElementById('certification-original-form');
    const template = `
      <div class="certification-entry card mb-3">
        <div class="card-body">
          <div class="row">
            <div class="col-md-8 mb-3">
              <label class="form-label fw-bold">Certification Name</label>
              <input type="text" name="resume[certifications_attributes][${certificationIndex}][name]" class="form-control certification-field" placeholder="e.g., AWS Certified Solutions Architect, JLPT N2">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label fw-bold">Completion Date</label>
              <input type="month" name="resume[certifications_attributes][${certificationIndex}][completion_date]" class="form-control certification-field">
            </div>
          </div>
        </div>
      </div>
    `;
    container.insertAdjacentHTML('beforeend', template);
    certificationIndex++;

    // Add event listeners to new fields
    const newEntry = container.lastElementChild;
    newEntry.querySelectorAll('.certification-field').forEach(field => {
      field.addEventListener('input', validateCertificationSection);
    });

    // Disable button after adding
    document.getElementById('add-certification-btn').disabled = true;
  }

  function addCertificationFromForm() {
    const name = document.getElementById('new-certification-name').value.trim();
    const completionDate = document.getElementById('new-certification-date').value;

    if (name && completionDate) {
      addCertificationDisplay(name, completionDate, certificationIndex);
      addHiddenCertificationField(name, completionDate);
      clearCertificationForm();
      document.getElementById('add-certification-btn-new').disabled = true;
      certificationIndex++;
    }
  }

  function addHiddenCertificationField(name, completionDate) {
    const certificationFieldsContainer = document.getElementById('certification-original-form');
    const fieldHtml = `
      <div class="certification-entry">
        <input type="text" name="resume[certifications_attributes][${certificationIndex}][name]" value="${name}" style="display: none;">
        <input type="month" name="resume[certifications_attributes][${certificationIndex}][completion_date]" value="${completionDate}" style="display: none;">
      </div>
    `;
    certificationFieldsContainer.insertAdjacentHTML('beforeend', fieldHtml);
  }

  function clearCertificationForm() {
    document.getElementById('new-certification-name').value = '';
    document.getElementById('new-certification-date').value = '';
  }

  function removeCertificationDisplay(index) {
    const displayEntry = document.querySelector(`.certification-display-entry[data-index="${index}"]`);
    if (displayEntry) {
      displayEntry.remove();
    }
    const certificationFields = document.querySelectorAll('#certification-original-form .certification-entry');
    if (certificationFields[index]) {
      certificationFields[index].remove();
    }
  }

  function switchToCertificationDisplayMode() {
    // Hide original form
    document.getElementById('certification-original-form').style.display = 'none';

    // Show display and new form
    document.getElementById('certification-display').style.display = 'block';
    document.getElementById('certification-form').style.display = 'block';

    // Add event listeners to new form fields
    document.querySelectorAll('#certification-form .certification-field').forEach(field => {
      field.addEventListener('input', validateCertificationForm);
    });
  }

  function validateCertificationForm() {
    const name = document.getElementById('new-certification-name').value.trim();
    const completionDate = document.getElementById('new-certification-date').value;

    const addBtn = document.getElementById('add-certification-btn-new');
    const allFilled = name && completionDate;

    addBtn.disabled = !allFilled;
  }

  function formatMonthYear(dateString) {
    if (!dateString) return '';

    // Handle both date and month input formats
    if (dateString.includes('-')) {
      const parts = dateString.split('-');
      if (parts.length === 2) {
        // Month format (YYYY-MM)
        const year = parts[0];
        const month = parseInt(parts[1]);
        const monthNames = [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
        return `${monthNames[month - 1]} ${year}`;
      } else if (parts.length === 3) {
        // Date format (YYYY-MM-DD) - fallback for existing data
        const year = parts[0];
        const month = parseInt(parts[1]);
        const monthNames = [
          'January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December'
        ];
        return `${monthNames[month - 1]} ${year}`;
      }
    }

    return dateString;
  }
</script>
